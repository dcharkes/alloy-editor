module trans/desugar

imports // signatures
	
	src-gen/signatures/Alloy-sig
	
imports // functions
	
	trans/lib/origin	
	
rules
	
	desugar-before-analysis = 
		module-sig-names-to-sigs-name;
		try(sometd(preddecl-funparam-names-to-funparams-name))
	
	desugar-after-analysis = 
		id

rules // sig A,B{} -> sig A{} sig B{}
	
	// @type Module -> Module
	module-sig-names-to-sigs-name = Module(id,id,id,map(sig-names-to-sigs-name <+ ?a;![a]);flatten-list)
	
	// @type SigDecl -> [SigDecl]
	sig-names-to-sigs-name: sig@SigDecl(a, name*, b, c, d) -> s*
		with
			s* := <map(sig-name(|sig))>name*
	
	// @type (|SigDecl) string -> SigDecl
	sig-name(|sig) : name -> sig''
		with
			!sig  ;? SigDecl(a, _,      b, c, d);
			sig'  := SigDecl(a, [name], b, c, d);
			sig'' := <custom-origin(|sig)>sig'

rules // a1,a2:A -> a1:A, a2:A
	
	//@type PredDecl -> PredDecl
	preddecl-funparam-names-to-funparams-name = PredDecl(id, id, id, Some(map(funparam-names-to-funparams-name);flatten-list), id)
	
	//@type FunParam -> [FunParam]
	funparam-names-to-funparams-name: fpar@FunParam(VarDecl(a, b, name*, c, d)) -> f*
		with
			f* := <map(funparam-name(|fpar))>name*
	
	//@type (|FunParam) string -> FunParam
	funparam-name(|fpar): name -> fpar''
		with
			!fpar  ;? FunParam(VarDecl(a, b, _,      c, d));
			fpar'  := FunParam(VarDecl(a, b, [name], c, d));
			fpar'' := <custom-origin(|fpar)>fpar'

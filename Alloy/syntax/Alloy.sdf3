module Alloy


imports 

	Common
	Keywords

context-free start-symbols

	Start

context-free syntax

	Start.Module = <
		module <Name> <ModuleParams?>
		
		<{Import "\n"}*>
		
		<{Paragraph "\n\n"}*>
	>
	
	ModuleParams.ModuleParams = <[ <{ModuleParam ","}*> ]>
	ModuleParam.ModuleParam = <<Exactly?> <Ref>>

	
	Import.Import = <<Private?>open <Name> <RefList?> <As?>>
	As.As = <as <Name>>
	RefList.RefList = <[<{Ref ","}+>]>

	Paragraph.FactDecl = <
		fact <Name?> {
			<{Expr "\n"}*>
		}
	>
	
	Paragraph.AssertDecl = <
		assert <Name?> {
			<{Expr "\n"}*>
		}
	>
	
	Paragraph.FunDecl = <
		<Private?>fun <RefDot?><Name> <FunParams?> : <Expr> {
			<{Expr "\n"}*>
		}
	>
	
	Paragraph.PredDecl = <
		<Private?>pred <RefDot?><Name> <FunParams?> {
			<{PredExpr "\n"}*>
		}
	>
	PredExpr.PredExpr = Expr
	
	Paragraph.RunDecl = <
		<NameColon?> run <NameOrBlock> <Scope>
	>
	
	Paragraph.CheckDecl = <
		<NameColon?> check <NameOrBlock> <Scope>
	>
	
	Paragraph.SigDecl = <
		<{SigQual ""}*> sig <{Name ","}*> <SigExt?> {
			<{FieldDecl ","}*>
		} <Block?>
	>
	
	Paragraph.EnumDecl = <
		enum <Name> {
			<{Name ","}*>
		}
	>
	
	NameColon = <<Name> :>
	
	SigQual.Abstract = <abstract >
	SigQual.Lone     = <lone >
	SigQual.One      = <one >
	SigQual.Some2    = <some >
	SigQual.Private  = <private >
	
	SigExt.Extends    = <extends <Ref>>
	SigExt.In         = <in <RefUnion>>
	RefUnion.RefUnion = <<RefUnion> + <RefUnion>>
	RefUnion          = Ref
	
	Scope.Scope = <for <INT> <Expect?>>
	Scope.Scope = <for <INT> but <{TypeScope ","}+> <Expect?>>
	Scope.Scope = <for <{TypeScope ","}+> <Expect?>>
	Scope.Scope = <<Expect?>>
	
	TypeScope.TypeScope = <<Exactly?> <INT> <NameIntOrSeq>>
	
	NameIntOrSeq.Ref = Name
	NameIntOrSeq.Int = <int>
	NameIntOrSeq.Seq = <seq>
	
	Expect.Expect = <expect <INT>>
	
	NameOrBlock = Name
	NameOrBlock = Block
	
	FunParams = <(<{FunParam ","}*>)>
	FunParams = <[<{FunParam ","}*>]>
	FunParam.FunParam = VarDecl
	
	RefDot.RefDot = <<Ref>.>
	
	Expr.Let        = <let <{LetDecl ","}+> <BlockOrBar>>
	Expr.Quant      = <<Quantifier> <{VarDecl ","}+> <BlockOrBar>>
	Expr.Not        = <!<Expr>>
	Expr.Not        = <not <Expr>>
	Expr.No         = <no <Expr>>
	Expr.Some2      = <some <Expr>>
	Expr.Lone       = <lone <Expr>>
	Expr.One        = <one <Expr>>
	Expr.Set        = <set <Expr>>
	Expr.Seq        = <seq <Expr>>
	Expr.Card       = <#<Expr>>
	Expr.Transpose  = <~<Expr>>
	Expr.ReflTrans  = <*<Expr>>
	Expr.Transitive = <^<Expr>>
	Expr.Or         = <<Expr> || <Expr>>                  {left}
	Expr.Or2        = <<Expr> or <Expr>>                  {left}
	Expr.And        = <<Expr> && <Expr>>                  {left}
	Expr.And2       = <<Expr> and <Expr>>                 {left}
	Expr.Intersect  = <<Expr> & <Expr>>                   {left}
	Expr.Iff        = [[Expr] <=> [Expr]]                 {left}
	Expr.Iff2       = <<Expr> iff <Expr>>                 {left}
	Expr.Implies    = [[Expr] => [Expr]]                  {right}
	Expr.Implies2   = <<Expr> implies <Expr>>             {right}
	Expr.Union      = <<Expr> + <Expr>>                   {left}
	Expr.Difference = <<Expr> - <Expr>>                   {left}
	Expr.Override   = <<Expr> ++ <Expr>>                  {left}
	Expr.DomainRestr= [[Expr] <: [Expr]]                  {left}
	Expr.RangeRestr = [[Expr] :> [Expr]]                  {left}
	Expr.FieldRef   = <<Expr> . <Name>>                   {left,prefer}
	Expr.Join       = <<Expr> . <Expr>>                   {left,avoid}
	Expr.X          = [[Expr] << [Expr]]                  {left}
	Expr.Y          = [[Expr] >> [Expr]]                  {left}
	Expr.Z          = [[Expr] >>> [Expr]]                 {left}
	Expr.Arrow      = [[Expr] [Mult?]-> [Mult?][Expr]]    {right}
	Expr.Equals     = <<Expr> <Not?>= <Expr>>             {left}
	Expr.In         = <<Expr> <Not?>in <Expr>>            {left}
	Expr.Lt         = [[Expr] [Not?]> [Expr]]             {left}
	Expr.Gt         = [[Expr] [Not?]< [Expr]]             {left}
	Expr.Lte        = [[Expr] [Not?]=< [Expr]]            {left}
	Expr.Gte        = [[Expr] [Not?]?= [Expr]]            {left}
	Expr.ImpliesElse= [[Expr] => [Expr] else [Expr]]      {right}
	Expr.ImpliesElse2= [[Expr] implies [Expr] else [Expr]] {right}
	Expr.BoxJoin    = <<Expr> [<{Expr ","}*>]>            {left}
	Expr.Int        = <<INT>>
	Expr.None       = <none>
	Expr.Iden       = <iden>
	Expr.Univ       = <univ>
	Expr.Int        = <Int>
	Expr.seqInt     = <seq/Int>
	Expr            = <(<Expr>)> {bracket}
	Expr.Ref        = <<Name>>
	Expr.Ref        = <@<Name>>
	Expr            = Block
	Expr.SetCompr   = <{ <{VarDecl ","}+> <BlockOrBar> }>

	FieldDecl.FieldDecl = <<Private?><Disj?><{Name ","}+> : <Disj?><Expr>>
	VarDecl.VarDecl     = <<Private?><Disj?><{Name ","}+> : <Disj?><Expr>>

	LetDecl.LetDecl = <<Name> = <Expr>>

	Not.Not = <!>
	Not.Not = <not>

	Mult.Some2= <some >
	Mult.One  = <one >
	Mult.Lone = <lone >
	Mult.Set  = <set >

	Quantifier.All  = <all>
	Quantifier.No   = <no>
	Quantifier.Some2= <some>
	Quantifier.Lone = <lone>
	Quantifier.One  = <one>
	Quantifier.Sum  = <sum>

	Block.Block = <{ <{Expr "\n"}*> }>

	BlockOrBar = Block
	BlockOrBar.Bar = <| <Expr>>

	// Name.Name = <<Name>/<ID>>
	// Name = NameStart
	// NameStart.This = <this>
	// NameStart.Name = <<ID>>
	Name = NAME
	
	Ref.Ref = Name
	Ref.Univ = <univ>
	Ref.Int = <Int>
	Ref.SeqInt = <seq/Int>

	Exactly.Exactly = <exactly >
	Private.Private = <private >
	Disj.Disj       = <disj >

lexical syntax

	NAME = ("this" | ID) ("/" ID)*
	
context-free priorities

	{
		Expr.Transpose
		Expr.ReflTrans
		Expr.Transitive
	} >
	{ left:
		Expr.FieldRef
		Expr.Join
	} >
	{
		Expr.BoxJoin
	} >
	{	
		Expr.RangeRestr
	} >
	{
		Expr.DomainRestr
	} >
	{
		Expr.Arrow
	} >
	{
		Expr.Intersect
	} >
	{
		Expr.Override
	} >
	{
		Expr.Card
	} >
	{ left:
		Expr.Union
		Expr.Difference
	} >
	{ left:
		Expr.X
		Expr.Y
		Expr.Z
	} >
	{
		Expr.No
		Expr.Some2
		Expr.Lone
		Expr.One
		Expr.Set
		Expr.Seq
	} >
	{ left:
		Expr.In
		Expr.Equals
		Expr.Lt
		Expr.Gt
		Expr.Lte
		Expr.Gte
	} >
	{
		Expr.Not
	} >
	{ left:
		Expr.And
		Expr.And2
	} >
	{ right:
		Expr.Implies
		Expr.Implies2
		Expr.ImpliesElse
		Expr.ImpliesElse2
	} >
	{ left:
		Expr.Iff
		Expr.Iff2
	} >
	{ left:
		Expr.Or
		Expr.Or2
	} >
	{ left:
		Expr.Let
		Expr.Quant
	}
